name: CI Pipeline
on: [push, pull_request]  # Execute in pushes y PRs

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:  # Configure PostgresSQL to Testcontainers
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Step 1: Code Checkout
      - uses: actions/checkout@v4

      # Step 2: JDK Configuration
      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          java-version: '24'
          distribution: 'temurin'

      # Step 3: Dependency Cache of Maven (optional but recommend)
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      # Step 4: Test Execution
      - name: Run tests with Maven
        run: mvn test

      # Step 5: Build JAR
      - name: Build with Maven
        run: mvn clean package -DskipTests
        
      # Step 6: Verify Docker Hub Secrets
      - name: Verify Docker Hub Secrets
        run: |
          echo "Username: ${{ secrets.DOCKER_HUB_USERNAME }}"
          echo "Token length: ${#DOCKER_HUB_TOKEN}"

      # Step 7: Build image Docker
      - name: Build Docker image
        run: docker build -t products-service .

      # Step 8: Public in Docker Hub (optional)
      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'  # main branch
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      # Step 9: Public in Docker Hub (optional)
      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag products-service ${{ secrets.DOCKER_HUB_USERNAME }}/products-service:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/products-service:latest